{"ast":null,"code":"var _jsxFileName = \"/home/user/DWRJS-segundo-parcial/src/components/Navbar.js\";\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport Navbar from './Navbar';\n\n// Mock del contexto: simula el contexto para evitar la implementación real\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\njest.mock('../services/Context', () => ({\n  useRecipeContext: () => ({\n    searchRecipes: jest.fn() // Se simula la función searchRecipes\n  })\n}));\n\n// Pruebas para el componente Navbar\ndescribe('Navbar Component', () => {\n  var _s = $RefreshSig$();\n  // Verifica que el componente se renderiza correctamente\n  test('renders correctly', () => {\n    render(/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this));\n\n    // Verifica que el ícono de inicio (🏠) está presente en el componente\n    expect(screen.getByText('🏠')).toBeInTheDocument();\n\n    // Verifica que el campo de búsqueda está presente\n    expect(screen.getByPlaceholderText('Search for a meal...')).toBeInTheDocument();\n  });\n\n  // Verifica que el campo de búsqueda actualiza su valor y llama a la función de búsqueda\n  _s(test('updates search term and calls searchRecipes on input change', _s(() => {\n    _s();\n    const {\n      searchRecipes\n    } = require('../services/Context').useRecipeContext(); // Obtiene la función mockeada\n    render(/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this));\n    const searchInput = screen.getByPlaceholderText('Search for a meal...'); // Encuentra el campo de búsqueda\n\n    // Simula que el usuario escribe \"pizza\" en el campo de búsqueda\n    fireEvent.change(searchInput, {\n      target: {\n        value: 'beef'\n      }\n    });\n\n    // Verifica que el valor del campo de búsqueda se actualizó a \"pizza\"\n    expect(searchInput.value).toBe('beef');\n\n    // Verifica que la función searchRecipes fue llamada con el término \"pizza\"\n    expect(searchRecipes).toHaveBeenCalledWith('beef');\n  }, \"W6fvivDYj8bMAXdxA3VWUQNbCkk=\", true)), \"W6fvivDYj8bMAXdxA3VWUQNbCkk=\", true);\n});","map":{"version":3,"names":["React","render","screen","fireEvent","Navbar","jsxDEV","_jsxDEV","jest","mock","useRecipeContext","searchRecipes","fn","describe","_s","$RefreshSig$","test","fileName","_jsxFileName","lineNumber","columnNumber","expect","getByText","toBeInTheDocument","getByPlaceholderText","require","searchInput","change","target","value","toBe","toHaveBeenCalledWith"],"sources":["/home/user/DWRJS-segundo-parcial/src/components/Navbar.js"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport Navbar from './Navbar';\n\n// Mock del contexto: simula el contexto para evitar la implementación real\njest.mock('../services/Context', () => ({\n  useRecipeContext: () => ({\n    searchRecipes: jest.fn(), // Se simula la función searchRecipes\n  }),\n}));\n\n// Pruebas para el componente Navbar\ndescribe('Navbar Component', () => {\n  \n  // Verifica que el componente se renderiza correctamente\n  test('renders correctly', () => {\n    render(<Navbar />);\n    \n    // Verifica que el ícono de inicio (🏠) está presente en el componente\n    expect(screen.getByText('🏠')).toBeInTheDocument();\n    \n    // Verifica que el campo de búsqueda está presente\n    expect(screen.getByPlaceholderText('Search for a meal...')).toBeInTheDocument();\n  });\n\n  // Verifica que el campo de búsqueda actualiza su valor y llama a la función de búsqueda\n  test('updates search term and calls searchRecipes on input change', () => {\n    const { searchRecipes } = require('../services/Context').useRecipeContext(); // Obtiene la función mockeada\n    render(<Navbar />);\n    \n    const searchInput = screen.getByPlaceholderText('Search for a meal...'); // Encuentra el campo de búsqueda\n    \n    // Simula que el usuario escribe \"pizza\" en el campo de búsqueda\n    fireEvent.change(searchInput, { target: { value: 'beef' } });\n    \n    // Verifica que el valor del campo de búsqueda se actualizó a \"pizza\"\n    expect(searchInput.value).toBe('beef');\n    \n    // Verifica que la función searchRecipes fue llamada con el término \"pizza\"\n    expect(searchRecipes).toHaveBeenCalledWith('beef');\n  });\n});\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,MAAM,EAAEC,SAAS,QAAQ,wBAAwB;AAClE,OAAO,2BAA2B;AAClC,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAC,IAAI,CAACC,IAAI,CAAC,qBAAqB,EAAE,OAAO;EACtCC,gBAAgB,EAAEA,CAAA,MAAO;IACvBC,aAAa,EAAEH,IAAI,CAACI,EAAE,CAAC,CAAC,CAAE;EAC5B,CAAC;AACH,CAAC,CAAC,CAAC;;AAEH;AACAC,QAAQ,CAAC,kBAAkB,EAAE,MAAM;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAEjC;EACAC,IAAI,CAAC,mBAAmB,EAAE,MAAM;IAC9Bd,MAAM,cAACK,OAAA,CAACF,MAAM;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;;IAElB;IACAC,MAAM,CAAClB,MAAM,CAACmB,SAAS,CAAC,IAAI,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;;IAElD;IACAF,MAAM,CAAClB,MAAM,CAACqB,oBAAoB,CAAC,sBAAsB,CAAC,CAAC,CAACD,iBAAiB,CAAC,CAAC;EACjF,CAAC,CAAC;;EAEF;EACAT,EAAA,CAAAE,IAAI,CAAC,6DAA6D,EAAAF,EAAA,CAAE,MAAM;IAAAA,EAAA;IACxE,MAAM;MAAEH;IAAc,CAAC,GAAGc,OAAO,CAAC,qBAAqB,CAAC,CAACf,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAC7ER,MAAM,cAACK,OAAA,CAACF,MAAM;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;IAElB,MAAMM,WAAW,GAAGvB,MAAM,CAACqB,oBAAoB,CAAC,sBAAsB,CAAC,CAAC,CAAC;;IAEzE;IACApB,SAAS,CAACuB,MAAM,CAACD,WAAW,EAAE;MAAEE,MAAM,EAAE;QAAEC,KAAK,EAAE;MAAO;IAAE,CAAC,CAAC;;IAE5D;IACAR,MAAM,CAACK,WAAW,CAACG,KAAK,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;;IAEtC;IACAT,MAAM,CAACV,aAAa,CAAC,CAACoB,oBAAoB,CAAC,MAAM,CAAC;EACpD,CAAC,wCAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}