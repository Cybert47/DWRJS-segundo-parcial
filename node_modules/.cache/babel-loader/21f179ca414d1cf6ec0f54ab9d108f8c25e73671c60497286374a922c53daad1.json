{"ast":null,"code":"var _jsxFileName = \"/home/user/DWRJS-segundo-parcial/src/services/Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { FetchMealByFirstLetter, SearchMealByName, FetchMealById } from \"./mealtService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecipesContext = /*#__PURE__*/createContext();\nexport const RecipesProvider = ({\n  children\n}) => {\n  _s();\n  const [recipes, setRecipes] = useState([]); // Lista de comidas\n  const [mealDetails, setMealDetails] = useState(null); // Detalles de una comida específica\n\n  // Buscar recetas por nombre\n  const searchRecipes = async name => {\n    const results = await SearchMealByName(name);\n    if (results) {\n      setRecipes(results);\n    } else {\n      setRecipes([]);\n    }\n  };\n\n  // Cargar recetas por primera letra\n  const loadRecipes = async () => {\n    const results = await FetchMealByFirstLetter();\n    if (results) {\n      setRecipes(results);\n    }\n  };\n\n  // Obtener detalles de una comida por ID\n  const fetchMealDetails = async id => {\n    const meal = await FetchMealById(id);\n    if (meal) {\n      setMealDetails(meal); // Guarda los detalles de la comida\n    } else {\n      setMealDetails(null); // Si no hay resultados, limpia el estado\n    }\n  };\n  useEffect(() => {\n    loadRecipes(); // Carga las recetas iniciales cuando el componente se monta\n  }, []);\n  return /*#__PURE__*/_jsxDEV(RecipesContext.Provider, {\n    value: {\n      recipes,\n      searchRecipes,\n      loadRecipes,\n      mealDetails,\n      // Añadir los detalles de la comida al contexto\n      fetchMealDetails // Añadir la función de obtener detalles al contexto\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(RecipesProvider, \"ONe4ngFqOyMVObjaE5gB5jDnM3s=\");\n_c = RecipesProvider;\nexport const useRecipeContext = () => {\n  _s2();\n  return useContext(RecipesContext);\n};\n_s2(useRecipeContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"RecipesProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","FetchMealByFirstLetter","SearchMealByName","FetchMealById","jsxDEV","_jsxDEV","RecipesContext","RecipesProvider","children","_s","recipes","setRecipes","mealDetails","setMealDetails","searchRecipes","name","results","loadRecipes","fetchMealDetails","id","meal","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useRecipeContext","_s2","$RefreshReg$"],"sources":["/home/user/DWRJS-segundo-parcial/src/services/Context.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\"; \nimport { FetchMealByFirstLetter, SearchMealByName, FetchMealById } from \"./mealtService\";\n\nconst RecipesContext = createContext(); \n\nexport const RecipesProvider = ({ children }) => { \n    const [recipes, setRecipes] = useState([]); // Lista de comidas\n    const [mealDetails, setMealDetails] = useState(null); // Detalles de una comida específica\n\n    // Buscar recetas por nombre\n    const searchRecipes = async (name) => { \n        const results = await SearchMealByName(name);\n        if (results) {\n            setRecipes(results);\n        } else {\n            setRecipes([]);\n        }\n    };\n\n    // Cargar recetas por primera letra\n    const loadRecipes = async () => {\n        const results = await FetchMealByFirstLetter(); \n        if (results) {\n            setRecipes(results);\n        }\n    };\n\n    // Obtener detalles de una comida por ID\n    const fetchMealDetails = async (id) => {\n        const meal = await FetchMealById(id); \n        if (meal) {\n            setMealDetails(meal); // Guarda los detalles de la comida\n        } else {\n            setMealDetails(null); // Si no hay resultados, limpia el estado\n        }\n    };\n\n    useEffect(() => { \n        loadRecipes(); // Carga las recetas iniciales cuando el componente se monta\n    }, []);\n\n    return (\n        <RecipesContext.Provider \n            value={{ \n                recipes, \n                searchRecipes, \n                loadRecipes, \n                mealDetails, // Añadir los detalles de la comida al contexto\n                fetchMealDetails // Añadir la función de obtener detalles al contexto\n            }}\n        > \n            {children}\n        </RecipesContext.Provider>\n    );\n}\n\nexport const useRecipeContext = () => {\n    return useContext(RecipesContext); \n};\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,SAASC,sBAAsB,EAAEC,gBAAgB,EAAEC,aAAa,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzF,MAAMC,cAAc,gBAAGT,aAAa,CAAC,CAAC;AAEtC,OAAO,MAAMU,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMe,aAAa,GAAG,MAAOC,IAAI,IAAK;IAClC,MAAMC,OAAO,GAAG,MAAMd,gBAAgB,CAACa,IAAI,CAAC;IAC5C,IAAIC,OAAO,EAAE;MACTL,UAAU,CAACK,OAAO,CAAC;IACvB,CAAC,MAAM;MACHL,UAAU,CAAC,EAAE,CAAC;IAClB;EACJ,CAAC;;EAED;EACA,MAAMM,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMD,OAAO,GAAG,MAAMf,sBAAsB,CAAC,CAAC;IAC9C,IAAIe,OAAO,EAAE;MACTL,UAAU,CAACK,OAAO,CAAC;IACvB;EACJ,CAAC;;EAED;EACA,MAAME,gBAAgB,GAAG,MAAOC,EAAE,IAAK;IACnC,MAAMC,IAAI,GAAG,MAAMjB,aAAa,CAACgB,EAAE,CAAC;IACpC,IAAIC,IAAI,EAAE;MACNP,cAAc,CAACO,IAAI,CAAC,CAAC,CAAC;IAC1B,CAAC,MAAM;MACHP,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1B;EACJ,CAAC;EAEDb,SAAS,CAAC,MAAM;IACZiB,WAAW,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIZ,OAAA,CAACC,cAAc,CAACe,QAAQ;IACpBC,KAAK,EAAE;MACHZ,OAAO;MACPI,aAAa;MACbG,WAAW;MACXL,WAAW;MAAE;MACbM,gBAAgB,CAAC;IACrB,CAAE;IAAAV,QAAA,EAEDA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAElC,CAAC;AAAAjB,EAAA,CAjDYF,eAAe;AAAAoB,EAAA,GAAfpB,eAAe;AAmD5B,OAAO,MAAMqB,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClC,OAAO/B,UAAU,CAACQ,cAAc,CAAC;AACrC,CAAC;AAACuB,GAAA,CAFWD,gBAAgB;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}